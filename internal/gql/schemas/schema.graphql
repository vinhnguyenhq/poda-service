scalar Time

# Types
type User {
  id: ID!
  email: String!
  name: String
  firstName: String
  lastName: String
  nickName: String
  description: String
  location: String
  createdAt: Time!
  updatedAt: Time
}

type Drug {
  id: ID!
  name: String!
  description: String!
}

type UsageHistory {
  id: ID!
  drug: Drug
  user: User
  notes: String
  quantity: Int!
  createdAt: Time!
  updatedAt: Time
}

# Input Types
input UserInput {
  email: String
  displayName: String
  name: String
  firstName: String
  lastName: String
  nickName: String
  description: String
  location: String
}

# List Types
type Users {
  count: Int # You want to return count for a grid for example
  list: [User!]! # that is why we need to specify the users object this way
}

type UsageHistories {
  count: Int
  list: [UsageHistory!]!
}

# Define mutations here
type Mutation {
  createUser(input: UserInput!): User!
  updateUser(id: ID!, input: UserInput!): User!
  deleteUser(id: ID!): Boolean!
}

# Define queries here
type Query {
  users(id: ID): Users!
  usageHistories(userId: ID): UsageHistories!
}
